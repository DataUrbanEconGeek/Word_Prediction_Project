View(content)
results[1]
results[[1]]
results$1
results[1]
class(results[1])
results <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/*/text()", xmlValue)
results
results <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
results
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info'][1]/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()[1]", xmlValue)
results2 <- xpathSApply(res, "//*/span[@class='fl-member-card__info']/text()", xmlValue)
results2
results2[1]
content <- as.data.frame(matrix(results2, ncol = 1, byrow = TRUE))
View(content)
results3 <- xpathSApply(res, "//*/span[@class='fl-member-card__location']/text()", xmlValue)
results3[1]
results1[1]
results[1]
content2 <- as.data.frame(matrix(results3, ncol = 1, byrow = TRUE))
View(content2)
as.data.frame(results)
df <- cbind(as.data.frame(results), results2, results3)
View(df)
grep('[:alnum:]', content)
grep('[:alnum:]', df$results2)
grep('[:digits:]', df$results2)
grep('[:digits:]', df$results2[1])
grep('[:alnum:]', df$results2[1])
df$results2[1]
df$results2[2]
df$results2[[1]]
df$results2[1,1]
df$results2[1][1]
class(df$results2[1])
as.character(df$results2[1])
as.character(df$results2[1])[1]
unlist(df$results2[1])
as.character(df$results2[1])[1]
strsplit(as.character(df$results2[1]), "\n")
unlist(strsplit(as.character(df$results2[1]), "\n"))
unlist(strsplit(as.character(df$results2[1]), "\n"))[2]
unlist(strsplit(as.character(df$results2[1]), "\n"))[3]
unlist(strsplit(as.character(df$results2), "\n"))
temp <- unlist(strsplit(as.character(df$results2), "\n"))
temp
temp[1]
temp[1]2
strsplit(df$results2)
strsplit(df$results2, "\n")
strsplit(df$results2, "")
strsplit(df$results2, " ")
library(tidyr)
separate(df, results2)
separate(df, df$results2)
col(df)
colnames(df)
separate(df, df$results2)
separate(df, as.character(df$results2))
df$results2 <- as.character(df$results2)
separate(df, df$results2)
separate(df, results2)
separate(df, results2, c("Age", "Sex")))
separate(df, results2, c("Age", "Sex"))
library(stringr)
str_extract_all(df$results2[1], "\\(?[0-9,.]+\\)?")
str_extract_all(df$results2, "\\(?[0-9,.]+\\)?")
ages <- str_extract_all(df$results2[1], "\\(?[0-9,.]+\\)?")
ages[1]
ages[[1]]
unlist(ages)
source('~/Desktop/Cap_Stone/test2.R', echo=TRUE)
ages <- str_extract_all(df$results2, "\\(?[0-9,.]+\\)?")
ages[1]
ages[2]
unlist(ages)
ages <- unlist(str_extract_all(df$results2, "\\(?[0-9,.]+\\)?"))
as.data.frame(ages)
mean(ages)
mean(as.numeric(ages))
sex <- unlist(str_extract_all(df$results2, "\\(?[M,F]+\\)?"))
df <- cbind(as.data.frame(results), ages, sex, results3)
View(df)
user_names <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
df <- cbind(as.data.frame(user_names), ages, sex, results3)
View(df)
user_name <- xpathSApply(res, "//*/a[@class='fl-member-card__user']/text()", xmlValue)
age <- unlist(str_extract_all(df$results2, "\\(?[0-9,.]+\\)?"))
city <- xpathSApply(res, "//*/span[@class='fl-member-card__location']/text()", xmlValue)
df <- cbind(as.data.frame(user_names), ages, sex, city)
View(df)
View(df)
hist(df$ages)
hist(as.numeric(df$ages))
as.numeric(df$ages)
df$ages
df$ages[1]
as.numeric(df$ages[1])
class(df$ages[1])
as.character(df$ages[1])
as.numeric(as.character(df$ages[1]))
hist(as.numeric(as.character(df$ages)))
library(rvest)
url <- http://www.dcnyhistory.org/joyce/cenmid19.html
census <- url %>%
html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
url <- http://www.dcnyhistory.org/joyce/cenmid19.html
url <- 'http://www.dcnyhistory.org/joyce/cenmid19.html'
census <- url %>%
read_html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
census
census[[1]]
census <- url %>%
html() %>%
html_nodes(xpath='/html/body/table/tbody/tr/td/table') %>%
html_table()
data("Titanic")
head(Titanic)
Titanic
Titanic[1]
Titanic
class(Titanic)
Titanic[[1]]
install.packages("titanic")
library(titanic)
head(titanic_test)
str(titanic_test)
head(titanic_train)
str(titanic_train)
make_factors <- c("PassengerID", "Survived", "Pclass", "Sex", "cabin", "Embarked")
for(i in make_factors){
titanic_train$i <- factor(titanic_train$i)
}
for(i in make_factors){
titanic_train[, i] <- factor(titanic_train[, i])
}
titanic_train$PassengerId <- factor(titanic_train$PassengerId)
library(dplyr)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
make_factors <- c("PassengerId", "Survived", "Pclass", "Sex", "cabin", "Embarked")
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
make_factors <- c("PassengerId", "Survived", "Pclass", "Sex", "Cabin", "Embarked")
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors)
str(train)
library(ggplot2)
summarise(train)
summary(train)
ggplot(train, aes(x = Age)) +
geom_histogram()
ggplot(train, aes(x = SibSp)) +
geom_histogram()
source('~/.active-rstudio-document', echo=TRUE)
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar()
hist(train$Age)
hist(train$Age, bins = 10)
hist(train$Age, binwidth = 10)
hist(train$Age)
hist(train$Age, breaks = 10)
hist(train$Age, breaks = 20)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors) %>%
mutate(AgeGroup = ifelse(Age <= 15, "Kid",
ifelse(Age > 15 & Age <= 40, "Adult", "Older Adult")))
str(train)
train <- titanic_train %>%
mutate_each_(funs(factor), make_factors) %>%
mutate(AgeGroup = ifelse(Age <= 15, "Kid",
ifelse(Age > 15 & Age <= 40, "Adult", "Older Adult"))) %>%
mutate(AgeGroup = factor(AgeGroup))
str(train)
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar()
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar()
ggplot(train, aes(x = Survived, y = AgeGroup)) +
geom_point()
ggplot(train, aes(x = Survived, y = Age)) +
geom_point()
ggplot(train, aes(x = Survived, y = Age)) +
geom_boxplot()
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar()
ggplot(train, aes(x = Survived, fill = Sex)) +
geom_bar() +
facet_wrap(~AgeGroup)
ggplot(train, aes(x = Survived, fill = AgeGroup)) +
geom_bar() +
facet_wrap(~Sex)
summary(train$AgeGroup)
hist(subset(train, train$AgeGroup == "Kid"))
hist(subset(train, train$AgeGroup == "Kid")$Age)
hist(train$Age, breaks = 20)
abline(h = dnorm(train$Age, mean = mean(train$Age), sd = sd(train$Age)))
abline(dnorm(train$Age, mean = mean(train$Age), sd = sd(train$Age)))
library(titanic)
data("titanic_train")
library(ggplot2)
library(dplyr)
install.packages('broom')
library(broom)
library(rpart)
title: "Predicting Survival on the Titanic"
library(titanic)
train_df <- data("titanic_train")
t <- data("titanic_train")
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- titanic_train
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
glimpse(train_df)
library(ggplot2)
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
par(mfrow = c(1, 3))
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
library(gridExtra)
library(titanic)
train_df <- titanic_train
str(train_df)
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
str(train_df)
library(ggplot2)
library(gridExtra)
plot_1 <- ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_2 <- ggplot(train_df, aes(x = Sex, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_3 <- ggplot(train_df, aes(x = Embarked, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
return(plot_1)
plot_1
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
dev.off()
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
library(ggplot2)
source('~/.active-rstudio-document', echo=TRUE)
plot_1
plot_2
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
dev.off()
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
dev.off()
dev.off()
View(train_df)
str(train_df)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
library(dplyr)
var_names <- names(train_df)
var_factors <- c(var_names[1:3], var_names[5], var_names[11:12])
train_df <- train_df %>%
mutate_each_(funs(factor), var_factors)
str(train_df)
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
plot_1
ggplot(train_df, aes(x = Pclass, fill = Survived)) +
geom_histogram(stat = "count", position = "fill")
R.Version()
update.packages()
model_1 <- lm(mpg ~ dsp + wt, data = mtcars)
model_1 <- lm(mpg ~ disp + wt, data = mtcars)
model_1
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + wt, data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(log(mpg) ~ log(disp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) + lot(hp) + log(wt), data = mtcars)
model_1 <- lm(mpg ~ log(disp) + log(hp) + log(wt), data = mtcars)
summary(model_1)
model_1 <- lm(mpg ~ log(disp) * log(hp) + log(wt), data = mtcars)
summary(model_1)
log(3)
exp(1.098612)
model_5 <- lm(log(mpg) ~ cyl + log(disp) * log(hp) * log(wt) * drat + vs + am + gear + carb, data = mtcars)
prediction_5 <- predict(model_5, newdata = mtcars)
prediction_5
prediction_5[1]
signif(prediction_5[1], digits = 10)
round(prediction_5[1], digits = 10)
may_31 <- fromJSON(txt = "~/Downloads/May31Jobs.txt")
library(jsonlite)
may_31 <- fromJSON(txt = "~/Downloads/May31Jobs.txt")
may_31$est_time <- c(127, 177, 64, 127, 245, 127)
may_31$parts <- c(2 , 4 , 1, 2, 1, 2)
may_31$successful_parts <- c(2, 0, 1, 0, 1, 1)
may_31$failed_parts <- c(0, 4, 0, 2, 0, 1)
may_31$elapsed_time <- may_31$elapsed_time / 60
View(may_31)
jobs_printer_1 <- may_31[,3:5]
View(jobs_printer_1)
jobs_printer_1 <- cbind(jobs_printer_1, may_31[,7:8])
View(jobs_printer_1)
library(dplyr)
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts)
View(jobs_printer_1)
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
transmute(bot_id = "Printer 1")
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
mutate(bot_id = "Printer 1")
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
mutate(bot_id = "Printer 1") %>%
rename(slice_id = plate_print_id)
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
mutate(bot_id = "Printer 1") %>%
rename(plate_printed_id = plate_print_id)
write.csv(jobs_printer_1, file = "~/Desktop/Oee_for_3D_Printers")
write.csv(jobs_printer_1, file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv")
read.csv(file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv")
write.csv(jobs_printer_1, file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv", row.names = FALSE)
read.csv(file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv")
printer_1 <- read.csv(file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv")
as.POSIXct(jobs_printer_1$created_at)
as.POSIXlt(jobs_printer_1$created_at)
strftime(jobs_printer_1$created_at)
strptime(jobs_printer_1$created_at)
strptime(jobs_printer_1$created_at, format = "%Y-%M-%DT%h:%m:%s")
strptime(jobs_printer_1$created_at, format = "%Y-%m-%dT%H:%M:%S")
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
mutate(bot_id = "Printer 1") %>%
rename(plate_printed_id = plate_print_id) %>%
mutate(created_at = strptime(jobs_printer_1$created_at,
format = "%Y-%m-%dT%H:%M:%S")) %>%
mutate(finished_at = strptime(jobs_printer_1$finished_at,
format = "%Y-%m-%dT%H:%M:%S"))
strftime(jobs_printer_1$created_at,
format = "%Y-%m-%dT%H:%M:%S")
as.POSIXct(jobs_printer_1$created_at,
format = "%Y-%m-%dT%H:%M:%S")
jobs_printer_1 <- may_31 %>%
select(bot_id, plate_print_id, parts, est_time, state,
created_at, finished_at, elapsed_time, state,
successful_parts, failed_parts) %>%
mutate(bot_id = "Printer 1") %>%
rename(plate_printed_id = plate_print_id) %>%
mutate(created_at = as.POSIXct(jobs_printer_1$created_at,
format = "%Y-%m-%dT%H:%M:%S")) %>%
mutate(finished_at = as.POSIXct(jobs_printer_1$finished_at,
format = "%Y-%m-%dT%H:%M:%S"))
View(jobs_printer_1)
write.csv(jobs_printer_1, file = "~/Desktop/Oee_for_3D_Printers/Printer1Data.csv", row.names = FALSE)
install.packages("PNG")
install.packages("png")
library(png)
library(jpeg)
library(grid)
img_1 <- readJPEG("/Users/andrewrosa/Desktop/Oee_for_3D_Printers/images/availability_555.jpg")
grid.raster(img_1)
2 * .5 *3
3 * .5 * 2
.5 * 2 * 3
setwd("~/Desktop/Word_Prediction_Project")
root <- "~/Desktop/Word_Prediction_Project/"
load("~/Desktop/Word_Prediction_Project/samples.RData")
master_set <- c(twitter_sample, blog_sample, news_sample)
master_random <- randomizeSets(master_set)
randomizeSets <- function(data_set){
rows <- sample(NROW(data_set))
data_set_new <- data_set[rows]
connection <- file(description = paste(root,
deparse(substitute(data_set)),
"_randomized", ".txt", sep=""),
open = "w")
writeLines(data_set_new, con = connection)
close(connection)
return(data_set_new)
}
master_random <- randomizeSets(master_set)
master_random[1]
master_random[1] == master_set[1]
master_set[1]
master_set[4000]
sampleExtrack <- function(dataSet, size){
split <- round(length(dataSet) * size)
samp <- dataSet[1:split]
return(samp)
}
master_sample <- sampleExtrack(master_random, size = .04)
master_sample <- sampleExtrack(master_random, size = .4)
master_cleaned <- cleanUp(master_sample)
library(tm)
library(slam)
library(stringr)
master_cleaned <- cleanUp(master_sample)
options(mc.cores=1)
Bigram_Tokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
Bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = Bigram_Tokenizer))
Bigram_tdm_2 <- as.matrix(Bigram_tdm)
rm(Bigram_tdm_2)
rm(Bigram_Tokenizer)
rm(Bigram_tdm)
options(mc.cores=1)
bigram_tokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
bigram_matrix <- as.matrix(bigram_tdm)
bigram_frequency <- rowSums(bigram_matrix)
bigram_frequency <- sort(bigram_frequency, decreasing = TRUE)
bigram_top_10 <- bigram_frequency[1:10]
bigram_top_10
bigram <- data.frame(bigram_top_10)
bigram$terms <- rownames(bigram)
rownames(bigram) <- NULL
colnames(bigram) <- c("frequency", "terms")
bigram
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
bigram_tdm
bigram_tdm[1]
bigram_tdm[1, ]
bigram_tdm[1, 1]
bigram_tdm[1:2, 1:2]
bigram_matrix <- as.matrix(bigram_tdm)
bigram_matrix[1,1]
bigram_matrix[1,2]
bigram_matrix[1:5, 2:5]
sessionInfo()
library(RWeka)
library(tm)
options(mc.cores=1)
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
bigram_matrix <- as.matrix(bigram_tdm)
bigram_matrix[1:5, 1:5]
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 3, max = 3))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
bigram_matrix <- as.matrix(bigram_tdm)
bigram_matrix[1:5, 1:5]
bigram_matrix[400:405, 1:5]
bigram_matrix[400:405, 200:205]
cleanUp <- function(x){
Sample_Source <- VectorSource(x)
Sample_Corpus <- VCorpus(Sample_Source)
Sample_Clean <- tm_map(Sample_Corpus, content_transformer(tolower))
Sample_Clean <- tm_map(Sample_Clean, removePunctuation)
Sample_Clean <- tm_map(Sample_Clean, stripWhitespace)
return(Sample_Clean)
}
master_cleaned <- cleanUp(master_sample)
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tokenizer <- function(x)
NGramTokenizer(x, Weka_control(min = 2, max = 2))
bigram_tdm <- TermDocumentMatrix(master_cleaned, control = list(tokenize = bigram_tokenizer))
install.packages("rJava","http://rforge.net/",type="source")
